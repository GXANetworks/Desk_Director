#requires -version 3
<#
.SYNOPSIS
  Collection of functions to manage SolarWinds N-Central
.DESCRIPTION
  Developed for GXA 
  .PARAMETER Verbose
  Provides additional detail to console during execution
.INPUTS None
.OUTPUTS None
.NOTES
  Version:        1.0
  Author:         Rusty Franks
  Creation Date:  2018-05-21
  Purpose/Change: Initial script development
.EXAMPLE
  <Example explanation goes here>
  
  <Example goes here. Repeat this attribute for more than one example>
#>

#---------------------------------------------------------[Script Parameters]------------------------------------------------------

param (
)

#---------------------------------------------------------[Initialisations]--------------------------------------------------------

#Import Modules & Snap-ins

#----------------------------------------------------------[Declarations]----------------------------------------------------------

#Any Global Declarations go here

#-----------------------------------------------------------[Functions]------------------------------------------------------------

Function Get-NCentralDeviceCompany {
    <#
    .SYNOPSIS
      Get Company Custom Fields from ConnectWise Manage
    .DESCRIPTION
      Get Company Custom Fields from ConnectWise Manage

    .INPUTS None
    .OUTPUTS Array
    .NOTES
      Version:        1.0
      Author:         Rusty Franks
      Creation Date:  20180521
      Purpose/Change: Initial script development
    .EXAMPLE
    #>

    [CmdletBinding()]  
    param (
        [Parameter(Mandatory = $true)][String]$username = "",
        [Parameter(Mandatory = $true)][String]$password
    )

    begin {
        Write-Verbose "$(Get-Date -Format u) : Begin $($MyInvocation.MyCommand)"
        # Locate the Windows Agent Config folder
        $AgentConfigFolder = (Get-WmiObject win32_service -filter "Name like 'Windows Agent Service'").PathName
        $AgentConfigFolder = $AgentConfigFolder.Replace("bin\agent.exe", "config").Replace('"', '')

        # Get the N-Central server out of the ServerConfig.xml file
        $ConfigXML = [xml](Get-Content "$AgentConfigFolder\ServerConfig.xml")
        $serverHost = $ConfigXML.ServerConfig.ServerIP

        # Get the device's ApplianceID out of the ApplianceConfig.xml file
        $ConfigXML = [xml](Get-Content "$AgentConfigFolder\ApplianceConfig.xml")
        $applianceID = $ConfigXML.ApplianceConfig.ApplianceID

        # Get credentials
        $secpasswd = ConvertTo-SecureString "Rht1bNvMBE-D" -AsPlainText -Force
        $creds = New-Object System.Management.Automation.PSCredential ("\$username", $secpasswd)
        $secpasswd = $creds.GetNetworkCredential().Password

        $bindingURL = "https://" + $serverHost + "/dms/services/ServerEI?wsdl"
        $nws = New-Webserviceproxy $bindingURL -credential $creds

        # Feedback entered and discovered parameters
        Write-Verbose "$(Get-Date -Format u) : I am appliance - $applianceID - and my N-Central server is - $serverHost"

    }

    process {
        try {

            # Set up and execute the query
            $KeyPairs = @()

            $KeyPair = New-Object Microsoft.PowerShell.Commands.NewWebserviceProxy.AutogeneratedTypes.WebServiceProxy1com_dms_services_ServerEI_wsdl.T_KeyPair
            $KeyPair.Key = 'applianceID'
            $KeyPair.Value = $applianceID
            $KeyPairs += $KeyPair

            $rc = $nws.deviceGet($username, $secpasswd, $KeyPairs)
    
            $ReturnArray = @()
            #process response
            foreach ($Device in $rc) {
                $DeviceInfo = @{}
	
                foreach ($item in $Device.Info) {
                    $DeviceInfo[$item.key] = $item.Value
                }

                $ReturnArray += $DeviceInfo.'device.customertree'[2]
                $ReturnArray += $DeviceInfo.'device.customertree'[3]
   
                Remove-Variable DeviceInfo

                $company = $ReturnArray[0]
                Write-Verbose -Message "$(Get-Date -Format u) : Returning $company"
        
            }
 

        }

        catch {
            $errorMessage = $_.Exception.Message
            Write-Error -Message "$(Get-Date -Format u) : Error: [$errorMessage]"
        }

    }

    end {
        Write-Verbose -Message "$(Get-Date -Format u) : Ending $($MyInvocation.InvocationName)..."
        return $company
    }
}

#-----------------------------------------------------------[Execution]------------------------------------------------------------

